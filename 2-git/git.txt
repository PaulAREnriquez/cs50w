Git

'git' is a command-line tool that allows us to:

1. Keep track of changes that we make to the code
2. Synchronizes code between different people
3. Test changes to code (on a separate branch) without losing the original
4. Revert back to old versions of our code

Cloning a Repository
- Takes a repository from the Github server and download it in our own computer
- The repository and all its contents will now be downloaded to your local computer

`git clone <url>`

Commit
The savepoint state of the current files that you want to keep track of

1. If you want to keep track of individual files and not other files:
`git add <filename>`

2. Next, tell git to keep track of the files you added
You add a message inside "" to explicitly tell what changes you made
in this recent commit
It just makes it easier to remember what changes you made to a repository.

`git commit -m "message"`

Git will now save a new snapshot of the version of your code, keeping track
of the old version/s that used to exist in the repository

3. To know what's currently happening in the repository:

`git status`

4. Pushing commits to the repository in Github:
`git push <remote> <branchname>`
Ex: git push origin master

You might want to type in `git status` anytime you want to see the status of your
current repository, such as changes that have not yet been committed as well


If you want to add and commit all the files that have been changed:
The shortcut is,
`git commit -am "message"`

It combines the git add step and the git commit step

To download the current version of the repository in GitHub:

Pull

git pull <remote> <branchname>
Ex: `git pull origin master`

Merge Conflicts
Changes from different sources to the same part of the code in the repository

Once you pull from the github repository, and it has changes on it,
and you also have changes on the same lines in the code,
you will have to fix the conflicts first.

In your editor, you will see the changes you've made locally, and the
changes from the repository you are trying to pull.

You either discard the changes you downloaded and keep your locally made changes, origin
accept the changes you've received and discard your local changes, or keep both changes.

Once you resolved the conflict, you can now push this to the GitHub repository if you like.

Commit History

`git log`

You'll see the commits pushed to the GitHub repository, the authors for each commit.

Revert the current state of the local repository to an older state

`git reset --hard <commit-hash>`
Ex: git reset --hard f07f7e69967b0f512a365f47e6f8dc6b5de4914e

Reverts to the version of the repository that is currently on GitHub
`git reset --hard origin/master`


Branching

Checking for the branches in the repository:

`git branch`
If you currently have one branch, you will receive:
*master

This means that there is only one branch called master, and the asterisk means
this is what you're currently working on.

If you want to make a new branch, and switch to it:
`git checkout -b <name_of_branch>`
Ex: git checkout -b style

You will receive a message:
Switched to a new branch 'style'

If you type `git branch` again, you will receive:
master
*style

You are now on the style branch, and nothing you do on the style branch will affect
the master branch.

If you want to switch to another existing branch:
`git checkout <branchname>
Ex: git checkout master

Merging the changes made on another branch to another branch:

`git merge`

If the branch you want to merge has changes on the same line of code,
with the one you want to merge it with, you will have a merge conflict.

You have to resolve the conflict to successfully merge the branches.