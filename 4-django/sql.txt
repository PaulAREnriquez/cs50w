SQL, Models, and Migrations

SQL is a database language that is designed to interact with relational database management systems.
Databases that organize data into tables where every table has rows and columns.

Database Management systems
Mysql
PostgreSQL
SQLite - lightweight, stores all of its data as a single file, also Django's default
...

SQLite create a new sqlite file.
filename.sql

To run sqlite, you need to download and install it, and add it to your environment variables.

Type these commands to show the table nicely in the terminal:
sqlite> .mode columns
sqlite> .headers yes

SQLite types:
text
numeric - includes integer and real, but also  date and boolean 
integer - positive, negative and zero
real - float
blob - binary data such as files, audio

Mysql types:
CHAR (size)
VARCHAR (size)
SMALLINT
INT
BIGINT
float
DOUBLE
...

CREATE A table

Example:

CREATE TABLE flights (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    origin TEXT NOT NULL,
    destination TEXT NOT NULL,
    duration INTEGER NOT NULL,
);

Constraints
- CHECK - makes sure that a value is within a certain condition
- DEFAULT
- NOT NULL
- PRIMARY KEY
- UNIQUE

AUTOINCREMENT after PRIMARY KEY gives cue to sql to automatically update
the id everytime you add a row to a table


INSERT record in a table

Example:

INSERT INTO flights
 (origin,destination,duration)
 VALUES ("New York","London", 415)

We don't need to add id because we created that column as AUTOINCREMENT.


GET DATA from a table (SELECT statements)

SELECT * FROM flights; # *  means all columns
SELECT origin,destination FROM flights; # only the 2 columns

SELECT * FROM FLIGHTS WHERE id =3; # only the record with id =3
SELECT * FROM FLIGHTS WHERE origin = "New York"; # only the records with origin = "New York"
SELECT * FROM FLIGHTS WHERE duration > 500;
SELECT * FROM FLIGHTS WHERE duration > 500 AND destination = "Paris";
SELECT * FROM flights WHERE origin IN ("New York", "Lima");
SELECT * FROM flights WHERE origin LIKE "%a%"; # all flights with letter "a" in origin

Aggregate Functions:
AVERAGE()
COUNT()
MAX()
MIN()
SUM()
...

Updating record/s in a database:

Example:

UPDATE flights
    SET duration = 430
    WHERE origin = "New York"
    AND destination = "London";


DELETE from a database:

Example:

DELETE FROM flights WHERE destination = "Tokyo"

OTHER CLAUSES:

LIMIT
ORDER BY
GROUP BY - group by a particular column
HAVING
...

With Django, we're just going to be writing Python code, and Django will manipulate
the database for us creating the SQL commands that it is going to run on the underlying database.


JOINING TABLES

Putting records from another table to a table, not with the use of text but
with their ids. When you put the ids or PRIMARY KEYS of records of another table to a table, they are now called
as FOREIGN Keys.

TABLE RELATIONSHIPS

ONE TO MANY = one flight is associated with many passengers
MANY TO MANY = passengers may be associated with many flights and flights may be associated with many passengers

Types of JOINS:


1. JOIN/INNER JOIN - returns only the matching records based on the ON statement

SELECT firstname, origin, destination,
    FROM flights JOIN passengers
ON passengers.flight_id = flights.id;

2. LEFT OUTER JOIN
3. RIGHT OUTER JOIN
4. FULL OUTER JOIN

Query Optimization:

Creating Index on a table
An Index is used to query a table much faster. It is an additional data structure constructed
as a reference. It takes time and memory to construct this table and maintain it
every time you update the data inside the table. Once it exists, it makes querying on a particular
column much more efficient.

Example:
CREATE INDEX name_index ON passengers (lastname); # search for a passenger more efficently using their lastname

Risks and Threats:

A. SQL Injection
- a security vulnerability that happen if you're not careful about how it is
you actually execute your SQL commands

Say you have a users database.A users table with a username column and a password column
column.(Although in practice you don't store passwords in clear text)

You have a SQL query for a User sign in like this:
SELECT * FROM users
WHERE username = username AND password = password

A user typed in his username as harry and password as 12345
Example:
SELECT * FROM users
WHERE username = "harry" AND password = "12345"

If we get results back, we can sign our users in

However, if someone tries to sign in using:

hacker"-- as username
12345 as password

The query will be:
SELECT * FROM users 
WHERE username= "hacker"--" AND password = "12345"

The -- in sql is to comment everythings after it. The hacker can now login 
to your website even if they are not authorized to do so.

Solution:
1. Escape the characters using \ for user inputs
2. SQL abstraction in which we don't need to write the sql anymore, (for example using Django)

B. Race conditions

Events that are happening in parallel threads simultaneously.
For example, many users of Facebook are trying to like a post at the same time.

If we're not careful about how we run those particular sql queries, there is a potential 
to have race conditions problem and there will be conflict in updating the database.

Solution:
1. placing a lock on the database, when you let one transaction finish first before allowing
a new transaction to go through (although this is not efficently correct)




