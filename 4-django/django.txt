Django

A Python web framework which allows us to write Python code that is
able to dynamically generate HTML and CSS, ultimately allowing us to make
a dynamic web application.

Using HTML and CSS, the web pages we created were static web pages.
Everytime you visit a page, the page will always look identical.

Django dynamically generates html and css allowing web applications to respond
based on how user interact with it.

This is ultimately what we are going to create using the Django web framework.
We're going to create software that's going to run on a web server such that clients,
running in their web browser, can make requests to our web server, and our web server
will respond back with some sort of response.

How does this actually happen?

HTTP (HyperText Transfer Protocol)
- the protocol for how messages are sent back and forth across the internet.

In this case, you may think that a computer, some user, which we might call a client,
and then our server, which is the computer that contains the web application.

We are going to write a Django application that is going to run on this server,
and clients will make requests to our web server, the server will process those requests,
and return a response.

Underneath the hood, a request may look something like this:

GET / HTTP/1.1
Host: www.example.com
...

GET is an example of a request method, like you are trying to get a page.
GET means I would like to get a particular page.
In this case, you are trying to get the / page, which denotes for the root of the website,

HTTP/1.1 is the version of HTTP that we are using. 

And the host is what the URL we're trying to access the web page for.

This is the kind of request that's sent by my web browser when you type in a URL and press Enter.
The server processes the request and gives back some sort of response.

And the response will generally look something like this:

HTTP/1.1 200 OK
Content-Type: text/html
...

HTTP/1.1 is the HTTP version
200 OK is the response code
Content-Type: text/html the format of the response, that the user's web browser on the client should render

The idea is to think about the web in terms of requests and responses.
Once a user make a request, the server respond to the request.

HTTP Status Codes
200 OK
301 moved permanently
403 Forbidden
404 not found
500 internal server error

Django is a web framework. It is a set of tools that is already built for us, that's just going
to make it easy to get started by writing Python code in order to design a fully fledged web application
by taking care of the things web pages all have to do so that we can focus on interesting logic
of building our own web application.

Install Django
pip install django==version

Next, we create a Django project.
django-admin startproject PROJECT_NAME

Django will create the starter files for us to get started in the process of building web application.

Django will create a directory named PROJECT_NAME. And inside it is a directory of the same name, and manage.py.
We will use manage.py file to execute commands on the Django project.

Inside the directory of the same name, we will find:
__init__.py
asgi.py
settings.py - configuration settings for the Django application on how 
urls.py - table of contents for routes to visit on your application
wsgi.py

To run the application, we type in:
`python manage.py runserver`

Every Django project consists of one or more applications. Oftentimes, a big website
has multiple apps that are individual separate services.

In order to create a Django application:
`django-admin startapp APP_NAME`

Inside the app folder are:
- migrations folder
- __init__.py
- admin.py
- apps.py
- models.py
- tests.py
- views.py - describes what a user sees when they visit a particular route

Once you created an app, you need to install it to the main project:
Go to the settings.py of the PROJECT_NAME folder:
Add to the INSTALLED_APPS list the APP_NAME as a string

You can now edit views.py inside the app folder.

We need to tell the application when should a view in views.py be activated?
This means what URL a user needs to visit in order for a particular view to output
what the user needs.

We need to create a urls.py file for each app in a project.
Django has one urls.py file for  the entire project, but oftentimes each app
has its own urls.py file, such that if we have multiple different apps, each of those
doing something independent, we can have each of the individual apps have its own urls.py file
to control the URL's available for that particular application.

This is how you make the urls.py file:

from django.urls import path
from . import views

urlpatterns = [
    path("",views.index,name="index"),
]

The path() accepts a string that determines the URL, the view, and the name of the view
which is useful to reference it from other parts of the application.

Lastly, need to update the urls.py inside the PROJECT folder.
We will edit the urlpatterns list.
We will add another path(). For example:

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/',include("hello.urls"))
]

What this means is that we already include the path hello, as well as the urls.py for the hello application.

To run the app: we run again `python manage.py runserver`


Django models

Models provide a way of creating a Python class that is going to represent data that we want Django to store inside a database.

Everytime you create changes in the models.py, like adding a class representing a database,
you should update the databse to include information about the models tht you created.

This is the process called migration.
1. Creating the migration - the instructions on how to manipulate the database

Make sure that you are inside the project folder when running this command:
`python manage.py makemigrations`

A file will be created under the migrations folder inside your app directory.
This file tells how to manipulate the database to reflect the changes you have made to the model

2. Take those instructions and apply them to the underlying database

Apply the migrations to Django's database.
`python manage.py migrate`

A db.sqlite3 file will be created under the project directory,
that contains the table for your models.

How can you interact with the models?
You can use sql syntax by opening the file and writing commands, but Django provides nicely
abstraction layers on top of it so you won't need to execute commands yourself.
You can begin to work with Python classes, functions and variables.

You can do this by running the following command:
`python manage.py shell`

>>> from flights.models import Flight
# Inserting data into the Flight table
>>> f = Flight(origin="New York", destination="London",duration=415)
>>> f.save()

# Query the Flight table
>>> Flight.objects.all() # Same as SELECT * FROM Flight
<QuerySet [<Flight: Flight object (1)>]>

Any object has a string representation using __str__(), and you can implement this
to provide a string representation for each model

>>> from flights.models import Flight
>>> flights = Flight.objects.all()
>>> flights
<QuerySet [<Flight: 1: New York to London>]>
>>> for flight in flights:
...     print(flight)
...
1: New York to London
>>> flight.delete() # to delete the flight

Make sure that afterany changes you make in models.py, you run:
`python manage.py makemigrations`

It will create a new file if there are any changes.
Migrate those changes to Django's database, using:
`python manage.py migrate`

>>> python manage.py shell
>>> from flights.models import *
>>> jfk = Airport(code="JFK",city="New York")
>>> jfk.save()
>>> lhr=Airport(code="LHR",city="London")
>>> lhr.save()
>>> cdg=Airport(code="CDG",city="Paris")
>>> cdg.save()
>>> nrt=Airport(code="NRT",city="Tokyo")
>>> nrt.save()
>>> f = Flight(origin=jfk, destination=lhr, duration=415)
>>> f.save()
>>> f
<Flight: 1: New York (JFK) to London (LHR)>
>>> f.origin
<Airport: New York (JFK)>
>>> f.origin.city
'New York'
>>> f.origin.code
'JFK'
>>> lhr.arrivals.all()
<QuerySet [<Flight: 1: New York (JFK) to London (LHR)>]>

>>> python manage.py shell
>>> Airport.objects.all()
>>> jfk = Airport.objects.filter(city="New York").first()
>>> cdg = Airport.objects.filter(city="Paris").first()
>>> f = Flight(origin=jfk, destination=cdg, duration=435)
>>>f.save()

It's annoying that we always have to go to the shell to manipulate data on our database.
Django doesn't want you the programmer to repeat work that other people have already done.
This process of trying to define, edit and manipulate models is so common, that Django
has designed an entire app for the manipulation of these models, which is known as the Django admin app.

DJANGO-ADMIN APP

We need to create first an administration account through the terminal:
`python manage.py createsuperuser`

You need to supply a Username, Email address, and a Password.

Now, you need to register your models inside the admin.py file of your application.

Example:

from django.contrib import admin

from .models import Flight, Airport


# Register your models here.
admin.site.register(Airport)
admin.site.register(Flight)

You can now run again the server and go to /admin. Input your username and password.
Make changes to the models


Authentication

Check the users app folder.